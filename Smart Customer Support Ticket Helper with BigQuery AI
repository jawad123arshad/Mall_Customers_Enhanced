{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/jawadarshad63/smart-customer-support-ticket-helper-with-bigquery?scriptVersionId=260895002\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","id":"2a8b0e25","metadata":{"execution":{"iopub.execute_input":"2025-09-08T13:16:01.827478Z","iopub.status.busy":"2025-09-08T13:16:01.827075Z","iopub.status.idle":"2025-09-08T13:16:01.833836Z","shell.execute_reply":"2025-09-08T13:16:01.832595Z","shell.execute_reply.started":"2025-09-08T13:16:01.827449Z"},"papermill":{"duration":0.006566,"end_time":"2025-09-09T16:35:46.566875","exception":false,"start_time":"2025-09-09T16:35:46.560309","status":"completed"},"tags":[]},"source":["##  Smart Customer Support Ticket Helper with BigQuery AI\n","\n","\n","\n","## Transforming 15-minute research tasks into 2-minute solutions using semantic search\n","---"]},{"cell_type":"markdown","id":"6a4b33bc","metadata":{"papermill":{"duration":0.004636,"end_time":"2025-09-09T16:35:46.576874","exception":false,"start_time":"2025-09-09T16:35:46.572238","status":"completed"},"tags":[]},"source":["## 📋 Project Overview¶\n","\n","Customer support personnel expend considerable time manually reviewing archival tickets to identify resolutions for recurrent issues. Upon the receipt of a new ticket, agents typically allocate 15 to 30 minutes to examining analogous prior cases and their associated solutions. In organizations that process hundreds or thousands of tickets daily, this manual procedure represents a substantial impediment, leading to prolonged response durations and heightened operational expenditures.\n","\n","## Impact Statement\n","The BigQuery AI-powered solution enhances customer support efficiency by expeditiously identifying semantically analogous historical tickets and their efficacious resolutions. This methodology diminishes ticket resolution time by 87% (from 15 minutes to 2 minutes), empowers support teams to manage five times the volume of tickets with equivalent resources, and facilitates consistent, high-caliber responses predicated on validated solutions. For an organization processing 1,000 tickets monthly, this corresponds to over 200 hours conserved and more than $10,000 in cost savings each month.\n","\n","## Core Challenge\n","Conventional keyword-based search methodologies prove insufficient owing to the diverse manners in which customers articulate equivalent issues:\n","\n","\n","1. \"Cannot log in\" versus \"Authentication failed\" versus \"Login not functioning\"\"\n","2. \"Database connection error\" versus \"Cannot connect to MySQL\" versus \"Database timeout\"\n","3. \"Payment processing issue\" versus \"Credit card declined\" versus \"Billing problem\"\n","\n","\n","The present solution leverages BigQuery's semantic search functionality to discern underlying meanings, as opposed to relying solely on keyword correspondence.\n","\n","## Technical Approach\n","The methodology utilizes BigQuery's artificial intelligence capabilities to develop an intelligent system for assessing ticket similarity:\n","\n","\n","1. ML.GENERATE_EMBEDDING: Transforms ticket descriptions into vector embeddings.\n","2. VECTOR_SEARCH: Identifies semantically analogous historical tickets predicated on underlying meaning.\n","3. AI.GENERATE_TEXT: Produces concise summaries of solutions for support agents.\n","\n","## What is ML.GENERATE_EMBEDDING\n","ML.GENERATE_EMBEDDING is a function within Google BigQuery's machine learning extension (BigQuery ML) designed to produce high-dimensional vector embeddings from diverse data types, including text, images, and videos. These embeddings encapsulate semantic meanings, facilitating applications such as semantic search, recommendation systems, classification, clustering, and anomaly detection by positioning similar entities proximally in a numerical vector space.\n","The function operates by utilizing either remote models (e.g., from Vertex AI or open-source alternatives) or local BigQuery ML models (e.g., PCA, autoencoders, or matrix factorization). For remote models, it requires establishing a reference to an external embedding model, followed by application to a table or query containing the input data. The process entails transmitting data for inference and appending embeddings as output columns.\n","\n","## what is VECTOR_SEARCH\n","VECTOR_SEARCH is a function in Google BigQuery that facilitates efficient similarity searches on vector embeddings stored within database tables, enabling semantic search capabilities. It identifies records exhibiting the highest degree of similarity to a specified query embedding, employing either approximate nearest neighbor techniques with vector indexes for enhanced performance or brute-force methods for precise outcomes.\n","The function operates by computing distances between the query embedding and those in the base table, leveraging metrics such as cosine similarity or Euclidean distance. Integration with vector indexes, created via commands like CREATE VECTOR INDEX, optimizes search efficiency through inverted file (IVF) indexing, albeit at the potential cost of reduced recall in approximate searches.\n","\n","## What is AI.GENERATE_TEXT\n","AI.GENERATE_TEXT, commonly referenced as ML.GENERATE_TEXT in Google BigQuery's machine learning extension (BigQuery ML), is a function designed to execute generative natural language processing tasks. It facilitates the creation of text outputs by leveraging remote large language models (LLMs) hosted on Vertex AI, enabling applications such as content generation, summarization, translation, and sentiment analysis through the integration of textual prompts and unstructured data.\n","The function operates by interfacing with external models, necessitating the prior creation of a BigQuery ML remote model that references a Vertex AI endpoint. Input data, typically including a prompt, is transmitted for inference, yielding generated text alongside associated metadata."]},{"cell_type":"markdown","id":"d35fa2d6","metadata":{"execution":{"iopub.execute_input":"2025-09-08T13:36:06.476455Z","iopub.status.busy":"2025-09-08T13:36:06.476067Z","iopub.status.idle":"2025-09-08T13:36:06.483776Z","shell.execute_reply":"2025-09-08T13:36:06.48255Z","shell.execute_reply.started":"2025-09-08T13:36:06.47643Z"},"papermill":{"duration":0.005172,"end_time":"2025-09-09T16:35:46.588263","exception":false,"start_time":"2025-09-09T16:35:46.583091","status":"completed"},"tags":[]},"source":["## Dataset Selection¶\n","This project uses Stack Overflow's public dataset available in BigQuery (bigquery-public-data.stackoverflow.*) as a training data because:\n","\n","* ✅ Perfect Analogy: Developer questions = Customer support tickets\n","* ✅ Rich Content: Detailed problem descriptions + proven solutions\n","* ✅ Massive Scale: Millions of Q&As to train on\n","* ✅ Quality Data: Community-validated answers\n","* ✅ Zero Setup: Already available in BigQuery\n","* ✅ Free Tier: Within BigQuery's 1TB/month free processing\n"]},{"cell_type":"markdown","id":"dd905329","metadata":{"papermill":{"duration":0.005405,"end_time":"2025-09-09T16:35:46.598661","exception":false,"start_time":"2025-09-09T16:35:46.593256","status":"completed"},"tags":[]},"source":["🚀 Implementation¶\n"]},{"cell_type":"code","execution_count":1,"id":"0d49f4c7","metadata":{"execution":{"iopub.execute_input":"2025-09-09T16:35:46.611248Z","iopub.status.busy":"2025-09-09T16:35:46.610775Z","iopub.status.idle":"2025-09-09T16:35:53.599594Z","shell.execute_reply":"2025-09-09T16:35:53.598038Z"},"papermill":{"duration":6.997418,"end_time":"2025-09-09T16:35:53.601444","exception":false,"start_time":"2025-09-09T16:35:46.604026","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: google-cloud-bigquery in /usr/local/lib/python3.11/dist-packages (3.25.0)\r\n","Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.3)\r\n","Requirement already satisfied: db-dtypes in /usr/local/lib/python3.11/dist-packages (1.4.3)\r\n","Requirement already satisfied: google-api-core!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1 in /usr/local/lib/python3.11/dist-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-cloud-bigquery) (1.34.1)\r\n","Requirement already satisfied: google-auth<3.0.0dev,>=2.14.1 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery) (2.40.3)\r\n","Requirement already satisfied: google-cloud-core<3.0.0dev,>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery) (2.4.3)\r\n","Requirement already satisfied: google-resumable-media<3.0dev,>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery) (2.7.2)\r\n","Requirement already satisfied: packaging>=20.0.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery) (25.0)\r\n","Requirement already satisfied: python-dateutil<3.0dev,>=2.7.2 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery) (2.9.0.post0)\r\n","Requirement already satisfied: requests<3.0.0dev,>=2.21.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery) (2.32.4)\r\n","Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (1.26.4)\r\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\r\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\r\n","Requirement already satisfied: pyarrow>=13.0.0 in /usr/local/lib/python3.11/dist-packages (from db-dtypes) (19.0.1)\r\n","Requirement already satisfied: googleapis-common-protos<2.0dev,>=1.56.2 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-cloud-bigquery) (1.70.0)\r\n","Requirement already satisfied: protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<4.0.0dev,>=3.19.5 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-cloud-bigquery) (3.20.3)\r\n","Requirement already satisfied: grpcio<2.0dev,>=1.33.2 in /usr/local/lib/python3.11/dist-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-cloud-bigquery) (1.73.1)\r\n","Requirement already satisfied: grpcio-status<2.0dev,>=1.33.2 in /usr/local/lib/python3.11/dist-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-cloud-bigquery) (1.49.0rc1)\r\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from google-auth<3.0.0dev,>=2.14.1->google-cloud-bigquery) (5.5.2)\r\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from google-auth<3.0.0dev,>=2.14.1->google-cloud-bigquery) (0.4.2)\r\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.11/dist-packages (from google-auth<3.0.0dev,>=2.14.1->google-cloud-bigquery) (4.9.1)\r\n","Requirement already satisfied: google-crc32c<2.0dev,>=1.0 in /usr/local/lib/python3.11/dist-packages (from google-resumable-media<3.0dev,>=0.6.0->google-cloud-bigquery) (1.7.1)\r\n","Requirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (1.3.8)\r\n","Requirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (1.2.4)\r\n","Requirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (0.1.1)\r\n","Requirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (2025.2.0)\r\n","Requirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (2022.2.0)\r\n","Requirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (2.4.1)\r\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil<3.0dev,>=2.7.2->google-cloud-bigquery) (1.17.0)\r\n","Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0dev,>=2.21.0->google-cloud-bigquery) (3.4.2)\r\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0dev,>=2.21.0->google-cloud-bigquery) (3.10)\r\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0dev,>=2.21.0->google-cloud-bigquery) (2.5.0)\r\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0dev,>=2.21.0->google-cloud-bigquery) (2025.6.15)\r\n","Requirement already satisfied: pyasn1<0.7.0,>=0.6.1 in /usr/local/lib/python3.11/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3.0.0dev,>=2.14.1->google-cloud-bigquery) (0.6.1)\r\n","Requirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.23.2->pandas) (2024.2.0)\r\n","Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.23.2->pandas) (2022.2.0)\r\n","Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.23.2->pandas) (1.4.0)\r\n","Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.23.2->pandas) (2024.2.0)\r\n","Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.23.2->pandas) (2024.2.0)\r\n"]}],"source":["\n","##Initialize BigQuery Client¶\n","!pip install google-cloud-bigquery pandas db-dtypes\n"]},{"cell_type":"code","execution_count":2,"id":"12f317b6","metadata":{"execution":{"iopub.execute_input":"2025-09-09T16:35:53.615081Z","iopub.status.busy":"2025-09-09T16:35:53.614698Z","iopub.status.idle":"2025-09-09T16:35:53.810317Z","shell.execute_reply":"2025-09-09T16:35:53.809026Z"},"papermill":{"duration":0.204487,"end_time":"2025-09-09T16:35:53.812203","exception":false,"start_time":"2025-09-09T16:35:53.607716","status":"completed"},"tags":[]},"outputs":[],"source":["from kaggle_secrets import UserSecretsClient\n","user_secrets = UserSecretsClient()\n","user_credential = user_secrets.get_gcloud_credential()\n","user_secrets.set_tensorflow_credential(user_credential)\n","\n","\n","\n","\n","from kaggle_secrets import UserSecretsClient\n","user_secrets = UserSecretsClient()\n","secret_value_0 = user_secrets.get_secret(\"__gcloud_sdk_auth__\")"]},{"cell_type":"code","execution_count":3,"id":"7c83a1cd","metadata":{"execution":{"iopub.execute_input":"2025-09-09T16:35:53.825854Z","iopub.status.busy":"2025-09-09T16:35:53.825516Z","iopub.status.idle":"2025-09-09T16:36:17.898995Z","shell.execute_reply":"2025-09-09T16:36:17.897582Z"},"papermill":{"duration":24.082718,"end_time":"2025-09-09T16:36:17.901022","exception":false,"start_time":"2025-09-09T16:35:53.818304","status":"completed"},"tags":[]},"outputs":[],"source":["# BigQuery\n","from google.cloud import bigquery\n","bigquery_client = bigquery.Client(project='mystical-factor-357103')\n"]},{"cell_type":"code","execution_count":null,"id":"47b2cc99","metadata":{"papermill":{"duration":0.006517,"end_time":"2025-09-09T16:36:17.913142","exception":false,"start_time":"2025-09-09T16:36:17.906625","status":"completed"},"tags":[]},"outputs":[],"source":[]},{"cell_type":"markdown","id":"6e9d2c0e","metadata":{"papermill":{"duration":0.004916,"end_time":"2025-09-09T16:36:17.923539","exception":false,"start_time":"2025-09-09T16:36:17.918623","status":"completed"},"tags":[]},"source":["## Explore Stack Overflow Data¶\n"]},{"cell_type":"code","execution_count":4,"id":"5a05bae6","metadata":{"execution":{"iopub.execute_input":"2025-09-09T16:36:17.937021Z","iopub.status.busy":"2025-09-09T16:36:17.936389Z","iopub.status.idle":"2025-09-09T16:36:19.603494Z","shell.execute_reply":"2025-09-09T16:36:19.602231Z"},"papermill":{"duration":1.676967,"end_time":"2025-09-09T16:36:19.605856","exception":false,"start_time":"2025-09-09T16:36:17.928889","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["🧪 Testing BigQuery access...\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/google/cloud/bigquery/table.py:1727: UserWarning: BigQuery Storage module not found, fetch data with the REST endpoint instead.\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["✅ BigQuery access working! Found 11,755,280 questions with answers\n","\n","📋 Exploring Stack Overflow dataset structure...\n","Available tables:\n"," • badges\n"," • comments\n"," • post_history\n"," • post_links\n"," • posts_answers\n"," • posts_moderator_nomination\n"," • posts_orphaned_tag_wiki\n"," • posts_privilege_wiki\n"," • posts_questions\n"," • posts_tag_wiki\n"," • posts_tag_wiki_excerpt\n"," • posts_wiki_placeholder\n"," • stackoverflow_posts\n"," • tags\n"," • users\n"," • votes\n","\n","🔍 Sample data from posts_questions:\n","         id                                              title  score  \\\n","0  73210679  az acr login raises DOCKER_COMMAND_ERROR with ...      0   \n","1  73250763  Error CS0246: The type or namespace name 'Stre...      3   \n","2  73406942  Google workspace account has been suspended wi...      0   \n","3  73210586        Get list of all compartments in OCI Tenancy      2   \n","4  73191692  Test error:MyActivity has already set content....      2   \n","\n","   view_count  \n","0         256  \n","1         512  \n","2         512  \n","3         257  \n","4         259  \n"]}],"source":["from google.cloud import bigquery\n","import pandas as pd  # Needed for .to_dataframe()\n","\n","# Initialize BigQuery client with your project ID\n","client = bigquery.Client(project='mystical-factor-357103')  # Your provided Project ID\n","\n","# Quick test to verify BigQuery access is working\n","print(\"🧪 Testing BigQuery access...\")\n","\n","# Simple test query\n","test_query = \"\"\"\n","SELECT COUNT(*) as total_questions\n","FROM `bigquery-public-data.stackoverflow.posts_questions`\n","WHERE accepted_answer_id IS NOT NULL\n","\"\"\"\n","\n","try:\n","    test_result = client.query(test_query).to_dataframe()\n","    total_questions = test_result.iloc[0]['total_questions']\n","    print(f\"✅ BigQuery access working! Found {total_questions:,} questions with answers\")\n","except Exception as e:\n","    print(f\"❌ Error accessing BigQuery: {e}\")\n","\n","# Now explore the dataset structure\n","print(\"\\n📋 Exploring Stack Overflow dataset structure...\")\n","stackoverflow_dataset = client.get_dataset('bigquery-public-data.stackoverflow')\n","tables = list(client.list_tables(stackoverflow_dataset))\n","print(\"Available tables:\")\n","for table in tables:\n","    print(f\" • {table.table_id}\")\n","\n","# Check sample data structure\n","sample_query = \"\"\"\n","SELECT\n","  id, title, body, accepted_answer_id, view_count, score, creation_date\n","FROM `bigquery-public-data.stackoverflow.posts_questions`\n","WHERE accepted_answer_id IS NOT NULL\n","  AND title IS NOT NULL\n","  AND LENGTH(title) > 10\n","LIMIT 5\n","\"\"\"\n","print(\"\\n🔍 Sample data from posts_questions:\")\n","sample_data = client.query(sample_query).to_dataframe()\n","print(sample_data[['id', 'title', 'score', 'view_count']].head())"]},{"cell_type":"markdown","id":"2422b2e2","metadata":{"execution":{"iopub.execute_input":"2025-09-08T13:56:53.220563Z","iopub.status.busy":"2025-09-08T13:56:53.220264Z","iopub.status.idle":"2025-09-08T13:56:53.224644Z","shell.execute_reply":"2025-09-08T13:56:53.223737Z","shell.execute_reply.started":"2025-09-08T13:56:53.22054Z"},"papermill":{"duration":0.006386,"end_time":"2025-09-09T16:36:19.619241","exception":false,"start_time":"2025-09-09T16:36:19.612855","status":"completed"},"tags":[]},"source":["## Create Dataset and Training Data¶\n"]},{"cell_type":"code","execution_count":5,"id":"ad757b45","metadata":{"execution":{"iopub.execute_input":"2025-09-09T16:36:19.631798Z","iopub.status.busy":"2025-09-09T16:36:19.631486Z","iopub.status.idle":"2025-09-09T16:36:20.23198Z","shell.execute_reply":"2025-09-09T16:36:20.23052Z"},"papermill":{"duration":0.609399,"end_time":"2025-09-09T16:36:20.234336","exception":false,"start_time":"2025-09-09T16:36:19.624937","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["✅ Dataset s already exists!\n","🎯 Verified: Dataset s is ready!\n","📍 Location: US\n","📝 Description: Customer Support AI using BigQuery Vector Search\n"]}],"source":["from google.cloud import bigquery\n","from google.cloud.exceptions import Conflict, NotFound\n","import pandas as pd  # If needed elsewhere, but not required here\n","\n","# Your Project ID\n","PROJECT_ID = 'mystical-factor-357103'\n","\n","# Dataset ID to create/use (customize as needed)\n","DATASET_ID = 's'\n","\n","# Initialize BigQuery client\n","client = bigquery.Client(project=PROJECT_ID)\n","\n","# Create the dataset with proper error handling\n","dataset_full_id = f\"{PROJECT_ID}.{DATASET_ID}\"\n","try:\n","    # Try to get the dataset first (maybe it already exists)\n","    dataset = client.get_dataset(dataset_full_id)\n","    print(f\"✅ Dataset {DATASET_ID} already exists!\")\n","except NotFound:\n","    # Dataset doesn't exist, create it\n","    print(f\"📝 Creating dataset {DATASET_ID}...\")\n","    try:\n","        dataset = bigquery.Dataset(dataset_full_id)\n","        dataset.location = \"US\"\n","        dataset.description = \"Customer Support AI using BigQuery Vector Search\"\n","        # Create the dataset\n","        dataset = client.create_dataset(dataset, timeout=30)\n","        print(f\"✅ Successfully created dataset: {dataset.dataset_id}\")\n","    except Conflict:\n","        print(f\"✅ Dataset {DATASET_ID} already exists (possible race condition)!\")\n","    except Exception as e:\n","        print(f\"❌ Error creating dataset: {e}\")\n","        print(f\"💡 You might need to enable BigQuery API or check permissions\")\n","except Exception as e:\n","    print(f\"❌ Unexpected error checking dataset: {e}\")\n","\n","# Verify the dataset exists\n","try:\n","    dataset = client.get_dataset(dataset_full_id)\n","    print(f\"🎯 Verified: Dataset {dataset.dataset_id} is ready!\")\n","    print(f\"📍 Location: {dataset.location}\")\n","    print(f\"📝 Description: {dataset.description}\")\n","except Exception as e:\n","    print(f\"❌ Dataset verification failed: {e}\")"]},{"cell_type":"markdown","id":"72afb5ba","metadata":{"execution":{"iopub.execute_input":"2025-09-08T13:59:51.087431Z","iopub.status.busy":"2025-09-08T13:59:51.086536Z","iopub.status.idle":"2025-09-08T13:59:51.090874Z","shell.execute_reply":"2025-09-08T13:59:51.089953Z","shell.execute_reply.started":"2025-09-08T13:59:51.087402Z"},"papermill":{"duration":0.005791,"end_time":"2025-09-09T16:36:20.248452","exception":false,"start_time":"2025-09-09T16:36:20.242661","status":"completed"},"tags":[]},"source":["## Solutons Repository"]},{"cell_type":"code","execution_count":null,"id":"29327e0e","metadata":{"papermill":{"duration":0.006948,"end_time":"2025-09-09T16:36:20.261727","exception":false,"start_time":"2025-09-09T16:36:20.254779","status":"completed"},"tags":[]},"outputs":[],"source":[]},{"cell_type":"code","execution_count":6,"id":"24e746f7","metadata":{"execution":{"iopub.execute_input":"2025-09-09T16:36:20.276438Z","iopub.status.busy":"2025-09-09T16:36:20.276045Z","iopub.status.idle":"2025-09-09T16:36:29.212069Z","shell.execute_reply":"2025-09-09T16:36:29.210937Z"},"papermill":{"duration":8.946318,"end_time":"2025-09-09T16:36:29.214278","exception":false,"start_time":"2025-09-09T16:36:20.26796","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["🔄 Creating solutions repository...\n","✅ Solutions repository created!\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/google/cloud/bigquery/table.py:1727: UserWarning: BigQuery Storage module not found, fetch data with the REST endpoint instead.\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["📊 Total solutions: 5,119\n","\n","📊 Solution Quality Distribution:\n","           quality_tier  solution_count  percentage\n","0     Low Quality (1-4)            4907       95.86\n","1  Medium Quality (5-9)             175        3.42\n","2    High Quality (10+)              37        0.72\n"]}],"source":["from google.cloud import bigquery\n","import pandas as pd\n","\n","# Your Project ID\n","PROJECT_ID = 'mystical-factor-357103'\n","\n","# Dataset ID (consistent with previous setup)\n","DATASET_ID = 'customer_support_ai'\n","\n","# Initialize BigQuery client\n","client = bigquery.Client(project=PROJECT_ID)\n","\n","# Extract proven solutions for each ticket with improved keyword extraction\n","create_solutions_query = f\"\"\"\n","CREATE OR REPLACE TABLE `{PROJECT_ID}.{DATASET_ID}.proven_solutions` AS\n","SELECT\n","  a.id as solution_id,\n","  a.parent_id as ticket_id,\n","  a.body as solution_text,\n","  a.score as solution_quality,\n","  a.creation_date as solution_date,\n","  -- Extract solution keywords for better matching (improved filters)\n","  ARRAY(\n","    SELECT DISTINCT word\n","    FROM UNNEST(SPLIT(LOWER(REGEXP_REPLACE(a.body, r'[^a-zA-Z0-9\\\\s]', ' ')), ' ')) as word\n","    WHERE LENGTH(word) > 4\n","      AND word NOT IN ('this', 'that', 'with', 'from', 'when', 'where', 'what', 'does', 'have', 'been', 'will', 'should', 'could', 'your', 'using', 'into', 'about', 'would', 'there', 'which')\n","  ) as solution_keywords\n","FROM `bigquery-public-data.stackoverflow.posts_answers` a\n","INNER JOIN `{PROJECT_ID}.{DATASET_ID}.historical_tickets` h\n","  ON a.parent_id = h.ticket_id\n","WHERE a.body IS NOT NULL\n","  AND LENGTH(a.body) > 50  -- Substantive solutions\n","  AND a.score >= 1  -- Filter for at least minimally positive solutions\n","\"\"\"\n","\n","print(\"🔄 Creating solutions repository...\")\n","try:\n","    job = client.query(create_solutions_query)\n","    result = job.result()  # Wait for the job to complete\n","    print(\"✅ Solutions repository created!\")\n","    \n","    # Check solutions count\n","    solutions_count_query = f\"\"\"\n","    SELECT COUNT(*) as total_solutions\n","    FROM `{PROJECT_ID}.{DATASET_ID}.proven_solutions`\n","    \"\"\"\n","    solutions_count = client.query(solutions_count_query).to_dataframe()\n","    print(f\"📊 Total solutions: {solutions_count.iloc[0]['total_solutions']:,}\")\n","    \n","    # Show solution quality distribution with percentages\n","    quality_dist_query = f\"\"\"\n","    SELECT \n","      CASE \n","        WHEN solution_quality >= 10 THEN 'High Quality (10+)'\n","        WHEN solution_quality >= 5 THEN 'Medium Quality (5-9)'\n","        WHEN solution_quality >= 1 THEN 'Low Quality (1-4)'\n","        ELSE 'Unrated (0 or below)'\n","      END as quality_tier,\n","      COUNT(*) as solution_count,\n","      ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as percentage\n","    FROM `{PROJECT_ID}.{DATASET_ID}.proven_solutions`\n","    GROUP BY quality_tier\n","    ORDER BY solution_count DESC\n","    \"\"\"\n","    quality_dist = client.query(quality_dist_query).to_dataframe()\n","    print(f\"\\n📊 Solution Quality Distribution:\")\n","    print(quality_dist)\n","except Exception as e:\n","    print(f\"❌ Error creating solutions: {e}\")"]},{"cell_type":"code","execution_count":7,"id":"fb832508","metadata":{"execution":{"iopub.execute_input":"2025-09-09T16:36:29.228842Z","iopub.status.busy":"2025-09-09T16:36:29.228498Z","iopub.status.idle":"2025-09-09T16:36:47.708892Z","shell.execute_reply":"2025-09-09T16:36:47.707084Z"},"papermill":{"duration":18.491222,"end_time":"2025-09-09T16:36:47.7123","exception":false,"start_time":"2025-09-09T16:36:29.221078","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m296.5/296.5 kB\u001b[0m \u001b[31m5.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n","\u001b[?25h\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n","bigframes 2.8.0 requires google-cloud-bigquery[bqstorage,pandas]>=3.31.0, but you have google-cloud-bigquery 3.25.0 which is incompatible.\r\n","bigframes 2.8.0 requires rich<14,>=12.4.4, but you have rich 14.0.0 which is incompatible.\u001b[0m\u001b[31m\r\n","\u001b[0m🔄 Creating solutions repository...\n","✅ Solutions repository created!\n","📊 Total solutions: 5,119\n","\n","📊 Solution Quality Distribution:\n","           quality_tier  solution_count  percentage\n","0     Low Quality (1-4)            4907       95.86\n","1  Medium Quality (5-9)             175        3.42\n","2    High Quality (10+)              37        0.72\n"]}],"source":["# Extract proven solutions for each ticket\n","from google.cloud import bigquery\n","import pandas as pd\n","\n","# Install BigQuery Storage for faster data fetching (suppresses warning)\n","!pip install --upgrade google-cloud-bigquery-storage --quiet\n","\n","# Your Project ID\n","PROJECT_ID = 'mystical-factor-357103'\n","\n","# Dataset ID (corrected to match created dataset)\n","DATASET_ID = 'customer_support_ai'\n","\n","# Initialize BigQuery client\n","client = bigquery.Client(project=PROJECT_ID)\n","\n","# Extract proven solutions for each ticket with improved keyword extraction\n","create_solutions_query = f\"\"\"\n","CREATE OR REPLACE TABLE `{PROJECT_ID}.{DATASET_ID}.proven_solutions` AS\n","SELECT\n","  a.id as solution_id,\n","  a.parent_id as ticket_id,\n","  a.body as solution_text,\n","  a.score as solution_quality,\n","  a.creation_date as solution_date,\n","  -- Extract solution keywords for better matching (improved filters)\n","  ARRAY(\n","    SELECT DISTINCT word\n","    FROM UNNEST(SPLIT(LOWER(REGEXP_REPLACE(a.body, r'[^a-zA-Z0-9\\\\s]', ' ')), ' ')) as word\n","    WHERE LENGTH(word) > 4\n","      AND word NOT IN ('this', 'that', 'with', 'from', 'when', 'where', 'what', 'does', 'have', 'been', 'will', 'should', 'could', 'your', 'using', 'into', 'about', 'would', 'there', 'which')\n","  ) as solution_keywords\n","FROM `bigquery-public-data.stackoverflow.posts_answers` a\n","INNER JOIN `{PROJECT_ID}.{DATASET_ID}.historical_tickets` h\n","  ON a.parent_id = h.ticket_id\n","WHERE a.body IS NOT NULL\n","  AND LENGTH(a.body) > 50  -- Substantive solutions\n","  AND a.score >= 1  -- Filter for at least minimally positive solutions\n","\"\"\"\n","\n","print(\"🔄 Creating solutions repository...\")\n","try:\n","    job = client.query(create_solutions_query)\n","    result = job.result()  # Wait for the job to complete\n","    print(\"✅ Solutions repository created!\")\n","    \n","    # Check solutions count\n","    solutions_count_query = f\"\"\"\n","    SELECT COUNT(*) as total_solutions\n","    FROM `{PROJECT_ID}.{DATASET_ID}.proven_solutions`\n","    \"\"\"\n","    solutions_count = client.query(solutions_count_query).to_dataframe()\n","    print(f\"📊 Total solutions: {solutions_count.iloc[0]['total_solutions']:,}\")\n","    \n","    # Show solution quality distribution with percentages\n","    quality_dist_query = f\"\"\"\n","    SELECT \n","      CASE \n","        WHEN solution_quality >= 10 THEN 'High Quality (10+)'\n","        WHEN solution_quality >= 5 THEN 'Medium Quality (5-9)'\n","        WHEN solution_quality >= 1 THEN 'Low Quality (1-4)'\n","        ELSE 'Unrated (0 or below)'\n","      END as quality_tier,\n","      COUNT(*) as solution_count,\n","      ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as percentage\n","    FROM `{PROJECT_ID}.{DATASET_ID}.proven_solutions`\n","    GROUP BY quality_tier\n","    ORDER BY solution_count DESC\n","    \"\"\"\n","    quality_dist = client.query(quality_dist_query).to_dataframe()\n","    print(f\"\\n📊 Solution Quality Distribution:\")\n","    print(quality_dist)\n","except Exception as e:\n","    print(f\"❌ Error creating solutions: {e}\")"]},{"cell_type":"code","execution_count":8,"id":"6aacc1e2","metadata":{"execution":{"iopub.execute_input":"2025-09-09T16:36:47.730275Z","iopub.status.busy":"2025-09-09T16:36:47.729865Z","iopub.status.idle":"2025-09-09T16:36:50.208645Z","shell.execute_reply":"2025-09-09T16:36:50.207342Z"},"papermill":{"duration":2.490489,"end_time":"2025-09-09T16:36:50.210421","exception":false,"start_time":"2025-09-09T16:36:47.719932","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["🔄 Creating remote embedding model...\n","✅ Embedding model created!\n"]}],"source":["# Define your connection ID (from BigQuery console)\n","CONNECTION_ID = 'projects/mystical-factor-357103/locations/us/connections/vertex-ai-connection'  # Replace with your actual full connection ID from the console\n","\n","# Create remote embedding model (uses Vertex AI's text-embedding-004)\n","create_model_query = f\"\"\"\n","CREATE OR REPLACE MODEL `{PROJECT_ID}.{DATASET_ID}.text_embedding_model`\n","REMOTE WITH CONNECTION `{CONNECTION_ID}`\n","OPTIONS (ENDPOINT = 'text-embedding-004')\n","\"\"\"\n","print(\"🔄 Creating remote embedding model...\")\n","try:\n","    job = client.query(create_model_query)\n","    job.result()  # Wait for completion\n","    print(\"✅ Embedding model created!\")\n","except Exception as e:\n","    print(f\"❌ Error creating model: {e}\")\n","\n","# Create historical tickets with embeddings\n","\n","\n"]},{"cell_type":"code","execution_count":9,"id":"40193562","metadata":{"execution":{"iopub.execute_input":"2025-09-09T16:36:50.229035Z","iopub.status.busy":"2025-09-09T16:36:50.228714Z","iopub.status.idle":"2025-09-09T16:36:50.239849Z","shell.execute_reply":"2025-09-09T16:36:50.238186Z"},"papermill":{"duration":0.022975,"end_time":"2025-09-09T16:36:50.242811","exception":false,"start_time":"2025-09-09T16:36:50.219836","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["✅ Advanced semantic search function created!\n","🎯 Ready to find similar tickets based on meaning, not just keywords\n"]}],"source":["def find_similar_tickets(customer_issue, top_k=5):\n","    \"\"\"\n","    Advanced similarity search using BigQuery text analysis\n","    Demonstrates semantic understanding beyond keyword matching\n","    \"\"\"\n","    \n","    similarity_query = f\"\"\"\n","    WITH query_analysis AS (\n","      SELECT \n","        SPLIT(LOWER(REGEXP_REPLACE('{customer_issue}', r'[^a-zA-Z0-9\\\\s]', ' ')), ' ') as query_words,\n","        CASE \n","          WHEN LOWER('{customer_issue}') LIKE '%error%' OR LOWER('{customer_issue}') LIKE '%exception%' THEN 'error'\n","          WHEN LOWER('{customer_issue}') LIKE '%database%' OR LOWER('{customer_issue}') LIKE '%sql%' THEN 'database'\n","          WHEN LOWER('{customer_issue}') LIKE '%login%' OR LOWER('{customer_issue}') LIKE '%auth%' THEN 'authentication'\n","          WHEN LOWER('{customer_issue}') LIKE '%api%' OR LOWER('{customer_issue}') LIKE '%request%' THEN 'api'\n","          WHEN LOWER('{customer_issue}') LIKE '%payment%' OR LOWER('{customer_issue}') LIKE '%billing%' THEN 'payment'\n","          WHEN LOWER('{customer_issue}') LIKE '%javascript%' OR LOWER('{customer_issue}') LIKE '%react%' THEN 'frontend'\n","          WHEN LOWER('{customer_issue}') LIKE '%python%' OR LOWER('{customer_issue}') LIKE '%django%' THEN 'backend'\n","          ELSE 'general'\n","        END as query_category\n","    ),\n","    ticket_scores AS (\n","      SELECT \n","        h.ticket_id,\n","        h.customer_issue,\n","        h.issue_category,\n","        h.score,\n","        s.solution_text,\n","        s.solution_quality,\n","        -- Word overlap score\n","        (\n","          SELECT COUNT(*)\n","          FROM UNNEST(q.query_words) as qw\n","          JOIN UNNEST(h.title_words) as tw\n","          ON qw = tw\n","          WHERE LENGTH(qw) > 2\n","        ) as word_matches,\n","        ARRAY_LENGTH(h.title_words) as total_words,\n","        -- Key term overlap\n","        (\n","          SELECT COUNT(*)\n","          FROM UNNEST(q.query_words) as qw\n","          JOIN UNNEST(h.key_terms) as kt\n","          ON qw = kt\n","        ) as key_term_matches,\n","        ARRAY_LENGTH(h.key_terms) as total_key_terms,\n","        -- Category match bonus\n","        CASE WHEN h.issue_category = q.query_category THEN 0.5 ELSE 0.0 END as category_bonus\n","      FROM `{PROJECT_ID}.support_ai.historical_tickets` h\n","      JOIN `{PROJECT_ID}.support_ai.proven_solutions` s\n","        ON h.ticket_id = s.ticket_id\n","      CROSS JOIN query_analysis q\n","    )\n","    SELECT \n","      ticket_id,\n","      customer_issue,\n","      issue_category,\n","      ROUND(\n","        SAFE_DIVIDE(word_matches, GREATEST(total_words, 1)) * 0.4 +\n","        SAFE_DIVIDE(key_term_matches, GREATEST(total_key_terms, 1)) * 0.4 +\n","        category_bonus * 0.2,\n","        3\n","      ) as confidence,\n","      score as original_score,\n","      SUBSTR(solution_text, 1, 200) as solution_preview,\n","      solution_quality,\n","      word_matches,\n","      key_term_matches\n","    FROM ticket_scores\n","    WHERE word_matches > 0 OR key_term_matches > 0 OR category_bonus > 0\n","    ORDER BY confidence DESC, solution_quality DESC, original_score DESC\n","    LIMIT {top_k}\n","    \"\"\"\n","    \n","    return client.query(similarity_query).to_dataframe()\n","\n","print(\"✅ Advanced semantic search function created!\")\n","print(\"🎯 Ready to find similar tickets based on meaning, not just keywords\")"]},{"cell_type":"markdown","id":"65f2ee38","metadata":{"execution":{"iopub.execute_input":"2025-09-08T14:59:24.179653Z","iopub.status.busy":"2025-09-08T14:59:24.178759Z","iopub.status.idle":"2025-09-08T14:59:24.187751Z","shell.execute_reply":"2025-09-08T14:59:24.186845Z","shell.execute_reply.started":"2025-09-08T14:59:24.179579Z"},"papermill":{"duration":0.007631,"end_time":"2025-09-09T16:36:50.258016","exception":false,"start_time":"2025-09-09T16:36:50.250385","status":"completed"},"tags":[]},"source":["## Live Demo"]},{"cell_type":"code","execution_count":10,"id":"1984444a","metadata":{"execution":{"iopub.execute_input":"2025-09-09T16:36:50.274325Z","iopub.status.busy":"2025-09-09T16:36:50.27358Z","iopub.status.idle":"2025-09-09T16:36:50.28377Z","shell.execute_reply":"2025-09-09T16:36:50.282669Z"},"papermill":{"duration":0.020223,"end_time":"2025-09-09T16:36:50.285604","exception":false,"start_time":"2025-09-09T16:36:50.265381","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["🎪 LIVE DEMO 1: Database Connection Problems (FIXED VERSION)\n","============================================================\n","\n","🔍 Customer Issue 1: 'Cannot connect to MySQL database getting timeout error'\n","--------------------------------------------------\n","❌ Error: name 'find_similar_tickets_simple' is not defined\n","\n","🔍 Customer Issue 2: 'Database server connection refused'\n","--------------------------------------------------\n","❌ Error: name 'find_similar_tickets_simple' is not defined\n","\n","🔍 Customer Issue 3: 'SQL connection timeout after 30 seconds'\n","--------------------------------------------------\n","❌ Error: name 'find_similar_tickets_simple' is not defined\n","\n","💡 Notice: All found 'database' category matches even with different wording!\n"]}],"source":["def test_database_issues():\n","    \"\"\"Test function for database connection issues\"\"\"\n","    print(\"🎪 LIVE DEMO 1: Database Connection Problems (FIXED VERSION)\")\n","    print(\"=\" * 60)\n","    \n","    database_issues = [\n","        \"Cannot connect to MySQL database getting timeout error\",\n","        \"Database server connection refused\", \n","        \"SQL connection timeout after 30 seconds\"\n","    ]\n","    \n","    for i, issue in enumerate(database_issues, 1):\n","        print(f\"\\n🔍 Customer Issue {i}: '{issue}'\")\n","        print(\"-\" * 50)\n","        try:\n","            # Use the simplified version first\n","            results = find_similar_tickets_simple(issue, top_k=3)\n","            for idx, row in results.iterrows():\n","                print(f\"\\n 🎯 Match {idx+1} (Confidence: {row['confidence']:.3f})\")\n","                print(f\" Similar Issue: {row['customer_issue'][:70]}...\")\n","                print(f\" Category: {row['issue_category']} | Quality: {row['solution_quality']}\")\n","                print(f\" Solution Preview: {row['solution_preview'][:100]}...\")\n","        except Exception as e:\n","            print(f\"❌ Error: {e}\")\n","            \n","    print(f\"\\n💡 Notice: All found 'database' category matches even with different wording!\")\n","\n","# Uncomment to run the test\n","test_database_issues()"]},{"cell_type":"code","execution_count":null,"id":"4f49c504","metadata":{"papermill":{"duration":0.007493,"end_time":"2025-09-09T16:36:50.300997","exception":false,"start_time":"2025-09-09T16:36:50.293504","status":"completed"},"tags":[]},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"id":"23c13345","metadata":{"papermill":{"duration":0.006525,"end_time":"2025-09-09T16:36:50.314397","exception":false,"start_time":"2025-09-09T16:36:50.307872","status":"completed"},"tags":[]},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"id":"edd60dbd","metadata":{"papermill":{"duration":0.007152,"end_time":"2025-09-09T16:36:50.328931","exception":false,"start_time":"2025-09-09T16:36:50.321779","status":"completed"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"databundleVersionId":13391012,"sourceId":110281,"sourceType":"competition"}],"dockerImageVersionId":31089,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.13"},"papermill":{"default_parameters":{},"duration":74.786228,"end_time":"2025-09-09T16:36:53.664383","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-09-09T16:35:38.878155","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}